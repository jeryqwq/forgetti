// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`statements > should optimize do-while statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let i = 0,
    _cache = _$$branch(_$$cache(_useMemo, 1), 0, 0),
    _id = 0;
  do {
    let _loop = _$$branch(_cache, _id++, 2),
      _equals = _$$equals(_loop, 0, i),
      _value = _equals ? _loop[0] : _loop[0] = i;
    _equals ? _loop[1] : _loop[1] = console.log(_value);
    i += 1;
  } while (i < props.x);
}"
`;

exports[`statements > should optimize for statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$branch(_$$cache(_useMemo, 1), 0, 0),
    _id = 0;
  for (let i = 0; i < 10; i += 1) {
    let _loop = _$$branch(_cache, _id++, 2),
      _equals = _$$equals(_loop, 0, i),
      _value = _equals ? _loop[0] : _loop[0] = i;
    _equals ? _loop[1] : _loop[1] = console.log(_value);
  }
}"
`;

exports[`statements > should optimize for-in statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useMemo, 3),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.arr,
    _cache2 = _$$branch(_cache, 2, 0),
    _id = 0;
  for (const x in _value2) {
    let _loop = _$$branch(_cache2, _id++, 2),
      _equals2 = _$$equals(_loop, 0, x),
      _value3 = _equals2 ? _loop[0] : _loop[0] = x;
    _equals2 ? _loop[1] : _loop[1] = console.log(_value3);
  }
}"
`;

exports[`statements > should optimize for-of statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useMemo, 3),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.arr,
    _cache2 = _$$branch(_cache, 2, 0),
    _id = 0;
  for (const x of _value2) {
    let _loop = _$$branch(_cache2, _id++, 2),
      _equals2 = _$$equals(_loop, 0, x),
      _value3 = _equals2 ? _loop[0] : _loop[0] = x;
    _equals2 ? _loop[1] : _loop[1] = console.log(_value3);
  }
}"
`;

exports[`statements > should optimize if statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useMemo, 6),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.type,
    _equals2 = _$$equals(_cache, 2, _value2),
    _value3 = _equals2 ? _cache[2] : _cache[2] = _value2;
  if (_equals2 ? _cache[3] : _cache[3] = _value3 === 'a') {
    let _cache2 = _$$branch(_cache, 4, 4),
      _equals3 = _$$equals(_cache2, 0, props),
      _value5 = _equals3 ? _cache2[0] : _cache2[0] = props,
      _value6 = _equals3 ? _cache2[1] : _cache2[1] = _value5.value,
      _equals4 = _$$equals(_cache2, 2, _value6),
      _value7 = _equals4 ? _cache2[2] : _cache2[2] = _value6;
    return _equals4 ? _cache2[3] : _cache2[3] = examples.a(_value7);
  } else {
    let _cache3 = _$$branch(_cache, 5, 4),
      _equals5 = _$$equals(_cache3, 0, props),
      _value9 = _equals5 ? _cache3[0] : _cache3[0] = props,
      _value10 = _equals5 ? _cache3[1] : _cache3[1] = _value9.value,
      _equals6 = _$$equals(_cache3, 2, _value10),
      _value11 = _equals6 ? _cache3[2] : _cache3[2] = _value10;
    return _equals6 ? _cache3[3] : _cache3[3] = examples.b(_value11);
  }
}"
`;

exports[`statements > should optimize labeled statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache3 = _$$cache(_useMemo, 2);
  foo: {
    let _cache2 = _$$branch(_cache3, 0, 1);
    {
      let _cache = _$$branch(_cache2, 0, 2);
      0 in _cache ? _cache[0] : _cache[0] = console.log(\\"face\\");
      break foo;
      1 in _cache ? _cache[1] : _cache[1] = console.log(\\"this will not be executed\\");
    }
  }
  1 in _cache3 ? _cache3[1] : _cache3[1] = console.log(\\"swap\\");
}"
`;

exports[`statements > should optimize switch statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useMemo, 6),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props;
  switch (_equals ? _cache[1] : _cache[1] = _value.type) {
    case 'a':
      let _cache2 = _$$branch(_cache, 2, 4),
        _equals2 = _$$equals(_cache2, 0, props),
        _value3 = _equals2 ? _cache2[0] : _cache2[0] = props,
        _value4 = _equals2 ? _cache2[1] : _cache2[1] = _value3.value,
        _equals3 = _$$equals(_cache2, 2, _value4),
        _value5 = _equals3 ? _cache2[2] : _cache2[2] = _value4;
      return _equals3 ? _cache2[3] : _cache2[3] = examples.a(_value5);
    case 'b':
      let _cache3 = _$$branch(_cache, 3, 4),
        _equals4 = _$$equals(_cache3, 0, props),
        _value7 = _equals4 ? _cache3[0] : _cache3[0] = props,
        _value8 = _equals4 ? _cache3[1] : _cache3[1] = _value7.value,
        _equals5 = _$$equals(_cache3, 2, _value8),
        _value9 = _equals5 ? _cache3[2] : _cache3[2] = _value8;
      return _equals5 ? _cache3[3] : _cache3[3] = examples.b(_value9);
    case 'c':
      let _cache4 = _$$branch(_cache, 4, 4),
        _equals6 = _$$equals(_cache4, 0, props),
        _value11 = _equals6 ? _cache4[0] : _cache4[0] = props,
        _value12 = _equals6 ? _cache4[1] : _cache4[1] = _value11.value,
        _equals7 = _$$equals(_cache4, 2, _value12),
        _value13 = _equals7 ? _cache4[2] : _cache4[2] = _value12;
      return _equals7 ? _cache4[3] : _cache4[3] = examples.c(_value13);
    default:
      let _cache5 = _$$branch(_cache, 5, 4),
        _equals8 = _$$equals(_cache5, 0, props),
        _value15 = _equals8 ? _cache5[0] : _cache5[0] = props,
        _value16 = _equals8 ? _cache5[1] : _cache5[1] = _value15.value,
        _equals9 = _$$equals(_cache5, 2, _value16),
        _value17 = _equals9 ? _cache5[2] : _cache5[2] = _value16;
      return _equals9 ? _cache5[3] : _cache5[3] = examples.default(_value17);
  }
}"
`;

exports[`statements > should optimize throw statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache = _$$cache(_useMemo, 5),
    _value = 0 in _cache ? _cache[0] : _cache[0] = createError,
    _equals = _$$equals(_cache, 1, props),
    _value2 = _equals ? _cache[1] : _cache[1] = props,
    _value3 = _equals ? _cache[2] : _cache[2] = _value2.message,
    _equals2 = _$$equals(_cache, 3, _value3),
    _value4 = _equals2 ? _cache[3] : _cache[3] = _value3;
  throw _equals2 ? _cache[4] : _cache[4] = _value(_value4);
}"
`;

exports[`statements > should optimize try statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let _cache2 = _$$cache(_useMemo, 3);
  try {
    let _cache = _$$branch(_cache2, 0, 2),
      _equals = _$$equals(_cache, 0, props),
      _value = _equals ? _cache[0] : _cache[0] = props;
    _equals ? _cache[1] : _cache[1] = _value.a();
  } catch (e) {
    let _cache3 = _$$branch(_cache2, 1, 3),
      _equals2 = _$$equals(_cache3, 0, props),
      _value3 = _equals2 ? _cache3[0] : _cache3[0] = props,
      _equals3 = _$$equals(_cache3, 1, e),
      _value4 = _equals3 ? _cache3[1] : _cache3[1] = e;
    _equals2 && _equals3 ? _cache3[2] : _cache3[2] = _value3.b(_value4);
  } finally {
    let _cache4 = _$$branch(_cache2, 2, 2),
      _equals5 = _$$equals(_cache4, 0, props),
      _value6 = _equals5 ? _cache4[0] : _cache4[0] = props;
    _equals5 ? _cache4[1] : _cache4[1] = _value6.c();
  }
}"
`;

exports[`statements > should optimize while statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$branch as _$$branch } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
function Example(props) {
  let i = 0,
    _cache = _$$branch(_$$cache(_useMemo, 1), 0, 0),
    _id = 0;
  while (i < props.x) {
    let _loop = _$$branch(_cache, _id++, 2),
      _equals = _$$equals(_loop, 0, i),
      _value = _equals ? _loop[0] : _loop[0] = i;
    _equals ? _loop[1] : _loop[1] = console.log(_value);
    i += 1;
  }
}"
`;
